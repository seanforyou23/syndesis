{
  "component":{
    "kind":"component",
    "baseScheme":"aws-s3",
    "scheme":"aws-s3-get-object-connector",
    "syntax":"aws-s3-get-object-connector:bucketNameOrArn",
    "title":"S3GetObject",
    "description":"Get specific Object with S3",
    "label":"AWS",
    "deprecated":false,
    "async":false,
    "consumerOnly":true,
    "lenientProperties":false,
    "javaType":"io.syndesis.s3.get.S3GetObjectConnectorComponent",
    "groupId":"io.syndesis",
    "artifactId":"aws-s3-get-object-connector",
    "version":"1.2-SNAPSHOT"
  },
  "componentProperties":{
    
  },
  "properties":{
    "bucketNameOrArn":{
      "kind":"path",
      "displayName":"Bucket Name Or Arn",
      "group":"common",
      "required":true,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Bucket name or ARN"
    },
    "accessKey":{
      "kind":"parameter",
      "displayName":"Access Key",
      "group":"common",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Amazon AWS Access Key"
    },
    "secretKey":{
      "kind":"parameter",
      "displayName":"Secret Key",
      "group":"common",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Amazon AWS Secret Key"
    },
    "deleteAfterRead":{
      "kind":"parameter",
      "displayName":"Delete After Read",
      "group":"consumer",
      "label":"consumer",
      "required":false,
      "type":"boolean",
      "javaType":"boolean",
      "deprecated":false,
      "secret":false,
      "defaultValue":false,
      "description":"Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header."
    },
    "fileName":{
      "kind":"parameter",
      "displayName":"File Name",
      "group":"consumer",
      "label":"consumer",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"To get the object from the bucket with the given file name"
    },
    "region":{
      "kind":"parameter",
      "displayName":"Region",
      "group":"producer",
      "label":"producer",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"The region where the bucket is located. This option is used in the com.amazonaws.services.s3.model.CreateBucketRequest."
    }
  },
  "connectorProperties":{
    
  }
}