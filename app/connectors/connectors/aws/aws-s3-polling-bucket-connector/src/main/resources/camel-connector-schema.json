{
  "component":{
    "kind":"component",
    "baseScheme":"aws-s3",
    "scheme":"aws-s3-polling-bucket-connector",
    "syntax":"aws-s3-polling-bucket-connector:bucketNameOrArn",
    "title":"S3PollingBucket",
    "description":"Polling specific bucket with S3",
    "label":"AWS",
    "deprecated":false,
    "async":false,
    "consumerOnly":true,
    "lenientProperties":false,
    "javaType":"io.syndesis.s3.polling.S3PollingBucketConnectorComponent",
    "groupId":"io.syndesis",
    "artifactId":"aws-s3-polling-bucket-connector",
    "version":"1.2-SNAPSHOT"
  },
  "componentProperties":{
    
  },
  "properties":{
    "bucketNameOrArn":{
      "kind":"path",
      "displayName":"Bucket Name Or Arn",
      "group":"common",
      "required":true,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Bucket name or ARN"
    },
    "accessKey":{
      "kind":"parameter",
      "displayName":"Access Key",
      "group":"common",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Amazon AWS Access Key"
    },
    "secretKey":{
      "kind":"parameter",
      "displayName":"Secret Key",
      "group":"common",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"Amazon AWS Secret Key"
    },
    "deleteAfterRead":{
      "kind":"parameter",
      "displayName":"Delete After Read",
      "group":"consumer",
      "label":"consumer",
      "required":false,
      "type":"boolean",
      "javaType":"boolean",
      "deprecated":false,
      "secret":false,
      "defaultValue":false,
      "description":"Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header."
    },
    "maxMessagesPerPoll":{
      "kind":"parameter",
      "displayName":"Max Messages Per Poll",
      "group":"consumer",
      "label":"consumer",
      "required":false,
      "type":"integer",
      "javaType":"int",
      "deprecated":false,
      "secret":false,
      "defaultValue":10,
      "description":"Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited."
    },
    "prefix":{
      "kind":"parameter",
      "displayName":"Prefix",
      "group":"consumer",
      "label":"consumer",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"The prefix which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in."
    },
    "region":{
      "kind":"parameter",
      "displayName":"Region",
      "group":"producer",
      "label":"producer",
      "required":false,
      "type":"string",
      "javaType":"java.lang.String",
      "deprecated":false,
      "secret":false,
      "description":"The region where the bucket is located. This option is used in the com.amazonaws.services.s3.model.CreateBucketRequest."
    },
    "delay":{
      "kind":"parameter",
      "displayName":"Delay",
      "group":"scheduler",
      "label":"consumer,scheduler",
      "required":false,
      "type":"integer",
      "javaType":"long",
      "optionalPrefix":"consumer.",
      "deprecated":false,
      "secret":false,
      "defaultValue":500,
      "description":"Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."
    }
  },
  "connectorProperties":{
    
  }
}